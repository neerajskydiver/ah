<?php
// $Id: inline_ajax_search.module,v 1.4.2.13 2010/06/11 12:31:44 fabianderijk Exp $
/**
 * Implementation of hook_init().
 */
function inline_ajax_search_init() {
  drupal_add_css(drupal_get_path('module', 'inline_ajax_search') . '/css/inline_ajax_search.css');
  global $_IAS_page;
  if (!$_IAS_page) {
    $settings = array('IAS_settings' => array(
      'word_size' => variable_get('minimum_word_size', 3),
      'resultsShown' => FALSE,
      'countCharsShown' => FALSE,
      'IAS_el' => NULL,
      'IAS_el_res' => NULL,
      'word_size_msg' => t('You have to search with more than @count characters.', array('@count' => variable_get('minimum_word_size', 3))),
    ));
    drupal_add_js($settings, 'setting');
  }
  drupal_add_js(drupal_get_path('module', 'inline_ajax_search') . '/js/inline_ajax_search.js');
}

/**
 * Implementation of hook_perm().
 */
function inline_ajax_search_perm() {
  return array(
    'administer inline_ajax_search',
    'search with inline_ajax_search',
  );
}

/**
 * Implementation of hook_menu().
 */
function inline_ajax_search_menu() {
  $items = array();
  $items['admin/settings/search/inline'] = array(
    'title' => 'Inline AJAX search settings',
    'description' => 'Inline AJAX search settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inline_ajax_search_settings'),
    'access arguments' => array('administer inline_ajax_search'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/search/inline/default'] = array(
    'title' => 'Inline AJAX search default settings',
    'description' => 'Inline AJAX search default settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inline_ajax_search_settings'),
    'access arguments' => array('administer inline_ajax_search'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['search/inline_ajax_search/get'] = array(
    'page callback' => '_inline_ajax_search',
    'access arguments' => array('search with inline_ajax_search'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/inline_ajax_search.inc',
  );
  $items['search/inline_ajax_search/post'] = array(
    'page callback' => '_inline_ajax_search_post',
    'access arguments' => array('search with inline_ajax_search'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/inline_ajax_search_post.inc',
  );
  return $items;
}

function inline_ajax_search_settings() {
  $form['inline_ajax_search_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of results shown'),
    '#default_value' => variable_get('inline_ajax_search_count', 10),
    '#size' => 3,
    '#maxlength' => 3,
    '#element_validate' => array('inline_ajax_form_validate'),
  );
  $form['inline_ajax_search_snippet'] = array(
    '#type' => 'select',
    '#title' => t('Show/hide snippet or teaser'),
    '#default_value' => variable_get('inline_ajax_search_snippet', 0),
    '#options' => array(0 => t('Show none'), 1 => t('Show snippet'), 2 => t('Show teaser')),
  );
  $form['inline_ajax_search_target'] = array(
    '#type' => 'select',
    '#title' => t('Target of the links'),
    '#default_value' => variable_get('inline_ajax_search_target', '_self'),
    '#options' => array('_self' => t('Self'), '_blank' => t('Blank'), '_top' => t('Top'), '_parent' => t('Parent')),
  );
  $form['inline_ajax_show_more'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show the show more results link'),
      '#default_value' => variable_get('inline_ajax_show_more', 0),
  );
  if (module_exists('luceneapi') && module_exists('luceneapi_node')) {
    $form['inline_ajax_use_lucene'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use the Search Lucene API'),
      '#default_value' => variable_get('inline_ajax_use_lucene', 0),
    );
    $form['inline_ajax_use_lucene_on_enter'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use the core search when hitting return.'),
      '#default_value' => variable_get('inline_ajax_use_lucene_on_enter', 0),
    );
    $form['inline_ajax_wildcard'] = array(
      '#type' => 'select',
      '#title' => t('Location of the wildcard'),
      '#default_value' => variable_get('inline_ajax_wildcard', 0),
      '#options' => array(0 => t('End of the word'), 1 => t('Start of the word'), 2 => t('On both start and end')),
    );
  }
    else {
      $form['inline_ajax_use_lucene'] = array(
        '#type' => 'item',
        '#title' => 'Search Lucene API',
        '#value' => t('If you install the Search Lucene API this module uses wildcards to search with. This has as benefit that you don\'t have to search on a whole word, but on a part of a string.'),
      );
    }
  $form = system_settings_form($form);
  return $form;
}

function inline_ajax_form_validate($element, &$form_state) {
  if (!is_numeric($element['#value'])) {
    form_error($element, t('This has to be a number.'));
  }
}

/**
 * Implementation of hook_theme().
 */
function inline_ajax_search_theme() {
  return array(
    'inline_ajax_search_theme_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'inline_ajax_search-theme-form',
    ),
  );
}

/**
 * Implmentation of hook_block().
 */
function inline_ajax_search_block($op='list', $delta=0, $edit=array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array('info' => t('Inline AJAX search form'));
      return $blocks;
      break;
    case 'view':
      if (user_access('search with inline_ajax_search')) {
        $block = array('content' => theme('inline_ajax_search_theme_form'));
        return $block;
      }
      break;
  }
}

/**
 * Implementation of hook_search().
 * This has to be done because of the rewrite of the do_search and pager_query function. The normal node_search function returns only 10 results
 */
function inline_ajax_search_search($op = 'search', $keys = NULL) {
  switch ($op) {
    case 'search':
      // Build matching conditions
      list($join1, $where1) = _db_rewrite_sql();
      $arguments1 = array();
      $conditions1 = 'n.status = 1';

      if ($type = search_query_extract($keys, 'type')) {
        $types = array();
        foreach (explode(',', $type) as $t) {
          $types[] = "n.type = '%s'";
          $arguments1[] = $t;
        }
        $conditions1 .= ' AND ('. implode(' OR ', $types) .')';
        $keys = search_query_insert($keys, 'type');
      }

      if ($category = search_query_extract($keys, 'category')) {
        $categories = array();
        foreach (explode(',', $category) as $c) {
          $categories[] = "tn.tid = %d";
          $arguments1[] = $c;
        }
        $conditions1 .= ' AND ('. implode(' OR ', $categories) .')';
        $join1 .= ' INNER JOIN {term_node} tn ON n.vid = tn.vid';
        $keys = search_query_insert($keys, 'category');
      }

      // Build ranking expression (we try to map each parameter to a
      // uniform distribution in the range 0..1).
      $ranking = array();
      $arguments2 = array();
      $join2 = '';
      // Used to avoid joining on node_comment_statistics twice
      $stats_join = FALSE;
      $total = 0;
      if ($weight = (int)variable_get('node_rank_relevance', 5)) {
        // Average relevance values hover around 0.15
        $ranking[] = '%d * i.relevance';
        $arguments2[] = $weight;
        $total += $weight;
      }
      if ($weight = (int)variable_get('node_rank_recent', 5)) {
        // Exponential decay with half-life of 6 months, starting at last indexed node
        $ranking[] = '%d * POW(2, (GREATEST(MAX(n.created), MAX(n.changed), MAX(c.last_comment_timestamp)) - %d) * 6.43e-8)';
        $arguments2[] = $weight;
        $arguments2[] = (int)variable_get('node_cron_last', 0);
        $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
        $stats_join = TRUE;
        $total += $weight;
      }
      if (module_exists('comment') && $weight = (int)variable_get('node_rank_comments', 5)) {
        // Inverse law that maps the highest reply count on the site to 1 and 0 to 0.
        $scale = variable_get('node_cron_comments_scale', 0.0);
        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(c.comment_count) * %f))';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        if (!$stats_join) {
          $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
        }
        $total += $weight;
      }
      if (module_exists('statistics') && variable_get('statistics_count_content_views', 0) &&
          $weight = (int)variable_get('node_rank_views', 5)) {
        // Inverse law that maps the highest view count on the site to 1 and 0 to 0.
        $scale = variable_get('node_cron_views_scale', 0.0);
        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(nc.totalcount) * %f))';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        $join2 .= ' LEFT JOIN {node_counter} nc ON nc.nid = i.sid';
        $total += $weight;
      }
      
      // When all search factors are disabled (ie they have a weight of zero), 
      // the default score is based only on keyword relevance and there is no need to 
      // adjust the score of each item. 
      if ($total == 0) {
        $select2 = 'i.relevance AS score';
        $total = 1;
      }
      else {
        $select2 = implode(' + ', $ranking) . ' AS score';
      }
      
      // Do search.
      $find = inline_ajax_search_do_search($keys, 'node', 'INNER JOIN {node} n ON n.nid = i.sid '. $join1, $conditions1 . (empty($where1) ? '' : ' AND '. $where1), $arguments1, $select2, $join2, $arguments2);

      // Load results.
      $results = array();
      foreach ($find as $item) {
        // Build the node body.
        $node = node_load($item->sid);
        $node->build_mode = NODE_BUILD_SEARCH_RESULT;
        $node = node_build_content($node, FALSE, FALSE);
        $node->body = drupal_render($node->content);

        // Fetch comments for snippet.
        $node->body .= module_invoke('comment', 'nodeapi', $node, 'update index');
        // Fetch terms for snippet.
        $node->body .= module_invoke('taxonomy', 'nodeapi', $node, 'update index');

        $extra = node_invoke_nodeapi($node, 'search result');
        $results[] = array(
          'link' => url('node/'. $item->sid, array('absolute' => TRUE)),
          'type' => check_plain(node_get_types('name', $node)),
          'title' => $node->title,
          'user' => theme('username', $node),
          'date' => $node->changed,
          'node' => $node,
          'extra' => $extra,
          'score' => $item->score / $total,
          'snippet' => search_excerpt($keys, $node->body),
        );
      }
      return $results;
  }
}

/**
 * Rewrite of do_search().
 */
function inline_ajax_search_do_search($keywords, $type, $join1 = '', $where1 = '1 = 1', $arguments1 = array(), $columns2 = 'i.relevance AS score', $join2 = '', $arguments2 = array(), $sort_parameters = 'ORDER BY score DESC') {
  $query = search_parse_query($keywords);

  if ($query[2] == '') {
    form_set_error('keys', t('You must include at least one positive keyword with @count characters or more.', array('@count' => variable_get('minimum_word_size', 3))));
  }
  if ($query[6]) {
    if ($query[6] == 'or') {
      drupal_set_message(t('Search for either of the two terms with uppercase <strong>OR</strong>. For example, <strong>cats OR dogs</strong>.'));
    }
  }
  if ($query === NULL || $query[0] == '' || $query[2] == '') {
    return array();
  }

  // Build query for keyword normalization.
  $conditions = "$where1 AND ($query[2]) AND i.type = '%s'";
  $arguments1 = array_merge($arguments1, $query[3], array($type));
  $join = "INNER JOIN {search_total} t ON i.word = t.word $join1";
  if (!$query[5]) {
    $conditions .= " AND ($query[0])";
    $arguments1 = array_merge($arguments1, $query[1]);
    $join .= " INNER JOIN {search_dataset} d ON i.sid = d.sid AND i.type = d.type";
  }

  // Calculate maximum keyword relevance, to normalize it.
  $select = "SELECT SUM(i.score * t.count) AS score FROM {search_index} i " . $join . " WHERE " . $conditions . " GROUP BY i.type, i.sid HAVING COUNT(*) >= %d ORDER BY score DESC";
  $arguments = array_merge($arguments1, array($query[4]));
  $normalize = db_result(db_query_range($select, $arguments, 0, 1));
  if (!$normalize) {
    return array();
  }
  $columns2 = str_replace('i.relevance', '('. (1.0 / $normalize) .' * SUM(i.score * t.count))', $columns2);

  // Build query to retrieve results.
  $select = "SELECT i.type, i.sid, " . $columns2 . " FROM {search_index} i " . $join . " " . $join2 . " WHERE " . $conditions . " GROUP BY i.type, i.sid HAVING COUNT(*) >= %d";
  $count_select =  "SELECT COUNT(*) FROM (" . $select . ") n1";
  $arguments = array_merge($arguments2, $arguments1, array($query[4]));

  // Do actual search query
  $result = pager_query($select . " " . $sort_parameters, 150, 0, $count_select, $arguments);
  $results = array();
  while ($item = db_fetch_object($result)) {
    $results[] = $item;
  }
  return $results;
}

/**
 * Process variables for inline_ajax_search-theme-form.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $form
 *
 * @see inline_ajax_search-theme-form.tpl.php,
 */
function template_preprocess_inline_ajax_search_theme_form(&$variables) {
  global $language;
  
  $variables['inline_ajax_search'] = new stdClass();
  $variables['inline_ajax_search']->types = variable_get('inline_ajax_search_types', array());
  $variables['inline_ajax_search']->count = variable_get('inline_ajax_search_count', 10);
  $variables['inline_ajax_search']->formurl = url('search/inline_ajax_search/post', array('language' => $language));
}

function inline_ajax_search_string_format($str) {
if (module_exists('luceneapi') && module_exists('luceneapi_node') && variable_get('inline_ajax_use_lucene', 0) == 1) {
    switch (variable_get('inline_ajax_wildcard', 0)) {
      case 1:
        $str = '*' . $str;
        break;
      case 2:
        $str = '*' . $str . '*';
        break;
      default:
        $str .= '*';
        break;
    }
  }
  return $str;
}