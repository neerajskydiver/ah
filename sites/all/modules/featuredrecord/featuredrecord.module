<?php

/**
 * Implementation of hook_perm().
 */
function featuredrecord_perm() {
  return array(
    'administer custom featuredrecord',
    'access testing pages'
  );
}

/**
 * Implementation of hook_menu().
 */
function featuredrecord_menu() {

$items = array();
  $items['admin/settings/featuredrecord'] = array(
    'title' => 'Featured Record',
    'description' => 'Featured Record.',
    'page callback' => 'featuredrecord_help_text',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
   
 $items['admin/settings/featuredrecord/help'] = array(
	'title' => 'Help',
	/* 'description' => 'Steps in which you add featured record ',
	'page callback' => 'featuredrecord_help_text',
	'access arguments' => array('administer site configuration'),
	'type' => MENU_LOCAL_TASK,*/
 	'type' => MENU_DEFAULT_LOCAL_TASK,
	'weight' => 4,
	);
 
 $items['admin/settings/featuredrecord/add'] = array(
	'title' => 'Add Featured Record',
	'description' => 'Steps in which you add featured record ',
	'page callback' => 'featuredrecord_record',
	'access arguments' => array('administer site configuration'),
	'type' => MENU_LOCAL_TASK,
'weight' => 1,
	);


  $items['admin/settings/featuredrecord/delete'] = array(
	'title' => 'Delete Featured Record',
	'description' => 'Steps in which you update featured record ',
	'access arguments' => array('access content'),
	'page callback' => 'featuredrecord_custom_menu',
	'access callback' => TRUE,
	'type' => MENU_LOCAL_TASK,
'weight' => 2,
	);

 $items['admin/settings/featuredrecord/description'] = array(
	'title' => 'Description Length',
	'description' => 'Steps in which you add featured record description length ',
	'page callback' => 'featuredrecord_length',
	'access arguments' => array('administer site configuration'),
	'type' => MENU_LOCAL_TASK,
'weight' => 3,
	);

  $items['featuredrecord/js'] = array(
    'page callback' => 'featuredrecord_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );



    return $items;
}



/**
 * Implementation of hook_help().
 */
function featuredrecord_help_text() {
  
$message = '';

  $message.= "<ul><b>For adding Featured Record for Sites -</b>";
  $message.= "<li>Select site title from Sites drop down. </li>";
  $message.= "<li>Onchange of sites, select featured record from the Collection list. </li>";
  $message.= "<li>Click Add button to save the featured record.</li></ul>";

  $message.= "<ul><b>For declaring description field length -</b>";
  $message.= "<li>Enter length into Char Length textbox. </li>";
  $message.= "<li>Click on Submit button.</li>";
  $message.= "<li>Character length is applicable for all Featured Record.</li></ul>";

  $message.= "<ul><b>For Delete collections from Sites -</b>";
  $message.= "<li>Select site title from Sites drop down. </li>";
  $message.= "<li>Onchange of sites, select featured record from the Collection list. </li>";
  $message.= "<li>Click Delete button to delete the featured record for that Site.</li></ul>";

 return $message;
}

/* To call disable module */
function featuredrecord_custom_menu(){

drupal_goto('admin/settings/featuredrecord_disable/delete');

}
/* to call disable module*/

/* truncate value of body field in featured record */
function featuredrecord_length(){

 $output = drupal_get_form('featuredrecord_length_form');

 return $output;
}

function featuredrecord_length_form_validate($form, &$form_state) {
  $numb = strtoupper($form_state['values']['length']);

  if (strlen($numb) >=5 ) {
     form_set_error('', t('Character length not more than 9999'));
   }
   
  if (strlen($numb)>=2){
    if ($numb[0]==0){
     form_set_error('', t('Character length not less than 10'));
   }
  }

  if (strlen($numb)<2)
  {
   form_set_error('', t('Character length not less than 10'));
   }

   if (strlen(trim($numb)) > 0){
    if (!is_numeric($numb)) {
      form_set_error('', t('Character length must be Numeric'));
    }
   }
     

}

function featuredrecord_length_form(){
$form = array();
$form['length'] = array(
    '#type' => 'textfield',
    '#title' => t('Char Length'),
    '#description' => t('Legth for description field is applicable for all Featured Records'),
     );	

$form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),

  );

  return $form;
}

function featuredrecord_length_form_submit(&$form,&$form_state) {
 
 $length=$form_state['values']['length'];
 if ($length!=''){
 $result=db_query("update ah_featuredrecord set charlength='$length' ");
 }
 else{
  form_set_error('', t('Please enter length for description field.'));
  }
       if ($result != 0 ){
       drupal_set_message(t('Length Added successfully.'));
       }

}


/* truncate value of body field in featured record */


/**
 * Show a configuration page for a custom testing block
 */
function featuredrecord_record() {
  // Include a nice Javascript which makes the settings easier
  drupal_add_js(drupal_get_path('module', 'featuredrecord') .'/helper.js');
 
   $config['sites'] = featuredrecord_get_site();
   $config['collection'] = featuredrecord_get_collection($config['sites']);

  $output = drupal_get_form('featuredrecord_form', $uid, $cid, $config);

  return $output;
}



/**
 * Return a new place selection box based on the country selection
 */
function featuredrecord_js() {
  // Get the current selected country for the new places
  $form_state = array('values' => $_POST);
  $new_places = featuredrecord_get_collection($form_state['values']['site']);
    
  if (is_array($new_places)){$new_places=$new_places;}else{
  $new_places[]=' '; 
  drupal_set_message(t('No Collections exists.'));
    }
     // Get form from cache and store modified place selection

  $form = form_get_cache($_POST['form_build_id'], $form_state);

  $form['collection'] = array(
    '#type' => 'select',
    '#title' => t('Collections'),
    '#description' => t('Select one or more collection.'),
    '#options' => $new_places,
    '#default_value' => $new_places,
    '#multiple'=>TRUE,

  );
  form_set_cache($_POST['form_build_id'], $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );

  // Rebuild the form.
  $form_state = array('submitted' => FALSE);
  $form = form_builder('featuredrecord_form', $form, $form_state);


  // Render the new output.
  $output = theme('status_messages') . drupal_render($form['collection']);

  // Don't call drupal_json(). ahah.js uses an iframe and
  // the header output by drupal_json() causes problems in some browsers.
  print drupal_to_js(array('status' => TRUE, 'data' => $output));


  
 
  exit;
}



/**
 * Construct the configuration form for a featuredrecord
 */
function featuredrecord_form($dummy, $uid, $cid, $config) {
  // set up a selection box with all countries
  drupal_add_js(drupal_get_path('module', 'featuredrecord') . '/submit.js');

  $form['site'] = array(
    '#type' => 'select',
    '#title' => t('Sites'),
    '#description' => t('Select any site title .'),
    '#options' => drupal_map_assoc($config['sites']),
    '#default_value'=>'None',
    '#ahah' => array(
      'path' => 'featuredrecord/js',
      'wrapper' => 'edit-collection-wrapper',
    ),
  );
  // set up a selection box with all place names of the selected country
  $form['collection'] = array(
    '#type' => 'select',
    '#title' => t('Collections'),
    '#description' => t('Select one or more collection.'),
    '#multiple'=>TRUE,
    '#options' => $config['collection'],
    '#default_value' => end($config['collection']),
  );

 

$form['submit'] = array(
    '#type' => 'submit',

    '#value' => t('Add'),

  );

  return $form;
}


/**
 * Handle the submission of the custom testing block
 */
function featuredrecord_form_submit(&$form,&$form_state) {


  $sites=$form_state['values']['site'];
  $sites=addslashes($sites);
  $sql = "SELECT n.nid,n.title FROM node n inner join content_type_bookmarks_sites cb on cb.nid=n.nid where n.title='$sites'";
  $result = db_query($sql);
  $row = db_fetch_array($result);
  $site_nid = $row['nid'];
  $site_title = $row['title'];

  $sqlcol = "SELECT cc.nid, n.title FROM node n inner join content_type_collection cc ";
  $sqlcol .= " on cc.nid=n.nid inner join content_type_bookmarks_sites cb on cc.field_site_id_nid=cb.nid WHERE cc.field_site_id_nid='$site_nid' and n.title!='' ORDER BY cc.nid ASC";
  $resultcol = db_query($sqlcol);
  $rowcol = db_result($resultcol);
   
 $collection=$form_state['values']['collection'];
       
 	if($_POST['site']=='')
 	{
	drupal_set_message(t('Please select site.'));
	}
	else if(count($collection)==0 && $rowcol=='' )
	{
	drupal_set_message(t('No collections for '.$site_title));
       }
       else if(count($collection)==0)
	{
	form_set_error('', t('Please select collection.'));
	//drupal_set_message(t('Please select collection.'));
       }
 	else{

       $comma_value=implode(",",$collection);
       foreach($collection as $key){
        
       $query = "SELECT count(collection_id) from ah_featuredrecord where collection_id='$key'";
      	$result = db_query($query);
       $countarray=db_result($result);
	

  		if ( $countarray < 1 )
   		{
       	 $result=db_query("insert into ah_featuredrecord (site_id,collection_id,flag,charlength) values('$site_nid','$key','1','$length')");
      		 }
       	else
		{
      		
		$result=db_query("update ah_featuredrecord set collection_id='$key'  where site_id='$site_nid' ");
		
		}
	
    }
      
	if ($result != 0 ){
       drupal_set_message(t('Added successfully.'));
       }

      }
}


function featuredrecord_get_site() {

  $sql = "SELECT n.title FROM node n inner join content_type_bookmarks_sites cb on cb.nid=n.nid inner join content_type_collection cc on cc.field_site_id_nid=cb.nid";
  $sql .= " GROUP BY cb.nid ORDER BY n.title ASC";
  $result = db_query($sql);
 //  $sites = array('' => 'None');
  while ($row = db_fetch_array($result)) {
    $sites[] = $row['title'];
  }
 
  return $sites;
}
function featuredrecord_get_collection($site) {
  $sqlSite = "SELECT n.nid FROM node n inner join content_type_bookmarks_sites cb on cb.nid=n.nid ";
  $sqlSite .= " where n.title='%s' and n.type='bookmarks_sites' ";
  $resultSite = db_query($sqlSite, $site);
  $rowSite = db_fetch_array($resultSite);
  $SiteData =  $rowSite['nid'];

$sql = "SELECT cc.nid, n.title FROM node n inner join content_type_collection cc ";
$sql .= " on cc.nid=n.nid inner join content_type_bookmarks_sites cb on cc.field_site_id_nid=cb.nid WHERE cc.field_site_id_nid='$SiteData' and n.title!='' and n.type='collection' ORDER BY cc.nid ASC";


  
//echo $sql;  
  $result = db_query($sql);
  while ($row = db_fetch_array($result)) {
   $collection[$row['nid']] = $row['title'];
  }
  return $collection;
}


