<?php
// $Id: hose_xml_container_node_creator.module,v 1.1 2010/11/15 15:19:43 rayvaughn Exp $

/**
 * @file
 * Implementation of 'container_node_creator' tag type.
 */

/**
 * @defgroup hose_xml_container_node_creator Container
 * @{
 * container_node_creator field type plug-in.
 */

/**
 * Implementation of hook_hose_xml_field_name().
 */
function hose_xml_container_node_creator_hose_xml_field_name() {
  return array('container_node_creator' => t('Container Node Creator'));
} // hose_xml_container_node_creator_hose_xml_field_name

/**
 * Implementation of hook_hose_xml_field_map_import().
 *
 * object $node
 *   The semi-built node.
 *
 * array $import_item
 *   The item that is being imported.
 *
 * array $item_profile
 *   Subpart of the hose_xml_profile that represents this profile.
 */
function hose_xml_container_node_creator_hose_xml_field_map_import($node, $value = NULL, array &$import_item, stdClass $item_profile) {
  if ($item_profile->type != 'container_node_creator') {
    return;
  }

  $node_type = $item_profile->settings['node_type'];

  // $value should be an array of arrays but when there is one element of values
  // coming from the SOAP call we need to wrap it into an array
  reset($value);
  if (!is_array(current($value))) {
    $value = array($value);
  }

  // get a subprofile (all children of the $item_profile) of the current hose xml profile
  $hose_xml_subprofile = hose_xml_get_export_config_flat($item_profile->pid, $item_profile->id, -1, NULL, FALSE, TRUE);

  // update the tag_path - make it relative to the current $item_profile tag_path
  foreach($hose_xml_subprofile as &$item_subprofile) {
    // the start param in substr is +1 so that we strip the '/' too
    $item_subprofile->tag_path = substr($item_subprofile->tag_path, 1 + strlen($item_profile->tag_path));
  }

  foreach($value as $sub_value) {
    $new_node = _hose_feeds_blank_node_instance();
    $new_node->type = $node_type;
    hose_xml_import_node_map_recurse($new_node, $sub_value, $hose_xml_subprofile);

    if (!_hose_node_validate($node)) {
      continue;
    }

    node_save($new_node);
  }
} // hose_xml_container_node_creator_hose_xml_field_map_import

/**
 * Implementation of hook_hose_xml_field_icon().
 */
function hose_xml_container_node_creator_hose_xml_field_icon() {
  return drupal_get_path('module', 'hose_xml_container_node_creator') .'/container_node_creator.png';
} // hose_xml_container_node_creator_hose_xml_field_icon

/**
 * Implementation of hook_hose_xml_settings_information().
 */
function hose_xml_container_node_creator_hose_xml_settings_information() {
  $node_type_objects = node_get_types();
  $node_types = array();

  foreach($node_type_objects as $node_type => $node_type_obj) {
    $node_types[$node_type] = $node_type_obj->name;
  }

  return array(
    'node_type' => array(
      'title' => t('Node Type to create'),
      'description' => t('Node Type to create'),
      'type' => 'select',
      'options' => $node_types,
    ),
  );
} // hose_xml_reference_hose_xml_settings_information

/**
 * Implementation of hook_hose_xml_validate().
 */
function hose_xml_container_node_creator_hose_xml_validate($data, $settings) {
  $reason = '';
  if (!empty($data)) {
    $reason = $settings['hint_container_node_creator'] ? $settings['hint_container_node_creator'] : t('container_node_creators are tags that contain other tags but should not take any input except (optionally) attributes.');
  }
  return array(
    'data' => $data,
    'reason' => $reason,
  );
} // hose_xml_container_node_creator_hose_xml_validate

/**
 * @} End of "defgroup hose_xml_container_node_creator".
 */