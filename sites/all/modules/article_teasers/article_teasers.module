<?php
// $Id$

/**
 * @file
 * Generate article teasers using batch_set.
 */

 
/**
 * Implementation of hook_perm().
 */
function article_teasers_perm() {
  return array('administer article teasers');
}


/**
 * Implementation of hook_menu().
 */
function article_teasers_menu() {
  $items['admin/settings/teaser-generate'] = array(
    'title' => 'Article Teasers',
    'description' => 'Generate Teasers.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('article_teasers_form'),
    'access arguments' => array('administer article teasers'),
  );
  return $items;
}


function article_teasers_form_submit($form, &$form_state)
{
  article_batch_generate_teasers($form_state);
//    $num_nodes = $form_state['values']['num_nodes'];//591; //

    //return $nid;
}

/**
 *
 *
 */
function generate_article_teasers(&$context = NULL)
{

    _batch_code();
    
      $context['results']['num_nids'] ++;
}

/**
 *
 *
 */
function _batch_code(){
  
    // to fetch latest nid updated
    $sql_latest = 'SELECT latest_nid FROM article_teasers';
    $latest_nid_obj = db_fetch_object(db_query($sql_latest));
    $latest_nid =  $latest_nid_obj->latest_nid;

// to fetch nid to process
      if ($latest_nid != 0 || $latest_nid!='' )
    {
     $sql = "SELECT nid FROM content_type_article WHERE nid > %d ORDER BY nid ASC";
     $query = db_query($sql, $latest_nid);
      $nid_obj = db_fetch_object($query);
    }
    else
    {
      $sql = 'SELECT nid FROM content_type_article ORDER BY nid ASC';
      $nid_obj = db_fetch_object(db_query($sql));
    }
    $nid =  $nid_obj->nid;
// END

    $node =  node_load($nid);


    generate_teasers($node);

    // KEEP TRACK OF PROCCESSED ARTICLE'S NIDS ::
      $sql_insert = 'INSERT INTO article_teasers_nids(article_nid) VALUES(%d)';
      db_query($sql_insert, $nid);

  // UPDATE LATEST NID PROCESSED FOR NEXT BATCH
     if ($latest_nid){
       $sql_update = 'UPDATE article_teasers SET latest_nid = %d';
       db_query($sql_update, $nid);
     }
     else
     {
        $sql_insert = 'INSERT INTO article_teasers(latest_nid) VALUES(%d)';
        db_query($sql_insert, $nid);
     }
    drupal_set_message(l($nid, 'node/'.$nid));

}

/**
 *
 * Menu Callback Function for setting's page.
 */
function article_teasers(){
  drupal_get_form('article_teasers_form');
}

/**
 * Implementation of hook_form().
 */

function article_teasers_form(){
  $form['import']['num_nodes'] = array (
	'#title' => 'Number OF Articles',
	'#type' => 'textfield',
	);

	$form['submit'] = array('#type' => 'submit', '#value' => t('Import'));
	return $form;
}

/**
 * Functions called from FAPI:
 */

function article_batch_generate_teasers($form_state){
  $operations = array();

  // Setup the batch operations and save the variables.
  for ($num = 0; $num < $form_state['values']['num_nodes']; $num ++) {
    $operations[] = array('generate_article_teasers', array());
  }
  // start the batch
  $batch = array(
    'title' => t('Import Content'),
    'operations' => $operations,
    'finished' => 'article_import_batch_finished',
  );
  batch_set($batch);
}

/**
 *
 */
function article_import_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = t('Finished @num_nids nodes processed successfully.', array('@num_nids' => $results['num_nids']));
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
}

/**
 *
 * Teaser creating code.
 */
function generate_teasers($node){
  $new_body = $node->body;
  $trimmed_body = removeTag($new_body,'img-block','<div','</div>');
  $output = removeTag($trimmed_body,'image-attributes','<div','</div>');
  $node->teaser = t(node_teaser($output, isset($node->format) ? $node->format : NULL));

  node_save($node);
}

